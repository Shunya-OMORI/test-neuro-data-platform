# /Dockerfile.typescript
# A generic, multi-stage Dockerfile for all TypeScript services in the monorepo

# --- 1. Base Stage ---
# Use a specific Node.js version for reproducibility
FROM node:20-slim AS base
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable

WORKDIR /app

# --- 2. Dependencies Stage ---
# Install only dependencies to leverage Docker layer caching
FROM base AS deps
COPY pnpm-lock.yaml .
COPY package.json .
# Copy only the package.json files from the workspace
COPY apps/*/*.json ./apps/*/
COPY packages/*/*.json ./packages/*/
RUN pnpm fetch

# --- 3. Build Stage ---
# Build the specific service
FROM base AS build
# This argument will be passed from docker-compose.yml
ARG SERVICE_NAME
COPY --from=deps /app/node_modules ./node_modules
COPY . .
# Build all dependencies first, then the specific service
RUN pnpm install --offline --frozen-lockfile
RUN pnpm --filter $SERVICE_NAME build

# --- 4. Production Stage ---
# Create a small, clean production image
FROM base AS production
ARG SERVICE_NAME
ENV NODE_ENV=production
# Copy built files from the build stage
COPY --from=build /app/apps/$SERVICE_NAME/dist ./dist
COPY --from=build /app/node_modules ./node_modules
COPY --from=build /app/apps/$SERVICE_NAME/package.json .

EXPOSE 5000
CMD ["node", "dist/index.js"]